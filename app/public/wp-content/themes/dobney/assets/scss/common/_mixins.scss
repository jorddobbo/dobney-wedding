/**
 * Output clearfix rules
 *
   `@include clearfix();`
 *
 */
@mixin clearfix {
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
    zoom: 1;
}
@mixin no-clearfix {
    &:before,
    &:after {
        display: none;
    }
    &:after {
        clear: none;
    }
    zoom: normal;
}

/**
 * Flexbox create gutters
 *
   `@include flex-gutters($base-spacing, 3, $desk-start);`
 *
 */
@mixin flex-gutters($spacing, $columns, $breakpoint: $end) {
    $column-width: 100%/$columns;
    $spacing-total: $spacing * ($columns - 1);
    $gutter-size: $spacing-total/$columns;
    $width: calc(#{$column-width} - #{$gutter-size});
    width: $width;
    margin-left: 0;
    margin-right: $spacing;

    @include media-query (max, $breakpoint) {
        &:nth-child(#{$columns}n+#{$columns}) {
            margin-right: 0;
            //margin-left: auto;
        }
    }
}


/**
 * Output media query block
 *
   `@include media-query(min, 640px);`
 *
 */
@mixin media-query($type, $breakpoint: $lap-start) {
    @if $type == "min" {
        @media only screen and (min-width: $breakpoint) {
            @content
        }
    } @else if $type == "max" {
        @media only screen and (max-width: $breakpoint - 1px) {
            @content
        }
    } @else if $type == "palm" {
        @media only screen and (max-width: $lap-start - 1px) {
            @content
        }
    } @else if $type == "lap" {
        @media only screen and (min-width: $lap-start) and (max-width: $desk-start - 1px) {
            @content
        }
    } @else if $type == "desk" {
        @media only screen and (min-width: $desk-start) {
            @content
        }
    } @else if $type == "wide" {
        @media only screen and (min-width: $wide-start) {
            @content
        }
    } @else if $type == "retina" {
        @media only screen and (-webkit-min-device-pixel-ratio: 2),
        only screen and (min--moz-device-pixel-ratio: 2),
        only screen and (-o-min-device-pixel-ratio: 2/1),
        only screen and (min-device-pixel-ratio: 2),
        only screen and (min-resolution: 192dpi),
        only screen and (min-resolution: 2dppx) {
            @content
        }
    }
}

/**
 * Output media query block with min and max limits
 *
   `@include media-query-bracket(640px, 960px);`
 *
 */
@mixin media-query-bracket($from: 0, $to: 0) {
    @if $to > $from {
        @media only screen and (min-width: $from) and (max-width: $to - 1px) {
            @content
        }
    }
}


/******************************************************************
Site Name:
Author:

Stylesheet: Mixins Stylesheet

This is where you can take advantage of Sass' great features: Mixins.
I won't go in-depth on how they work exactly,
there are a few articles below that will help do that. What I will
tell you is that this will help speed up simple changes like
changing a color or adding CSS3 techniques gradients.

A WORD OF WARNING: It's very easy to overdo it here. Be careful and
remember less is more.

Helpful:
http://sachagreif.com/useful-sass-mixins/
http://thesassway.com/intermediate/leveraging-sass-mixins-for-cleaner-code
http://web-design-weekly.com/blog/2013/05/12/handy-sass-mixins/

******************************************************************/


/*********************
TRANSITION
*********************/

/*
I totally rewrote this to be cleaner and easier to use.
You'll need to be using Sass 3.2+ for these to work.
Thanks to @anthonyshort for the inspiration on these.
USAGE: @include transition(all 0.2s ease-in-out);
*/

@mixin transition($transition...) {
  // defining prefixes so we can use them in mixins below
  $prefixes:      ("-webkit-", "" );
  @each $prefix in $prefixes {
    #{$prefix}transition: $transition;
  }
}

/*********************
CSS3 GRADIENTS
Be careful with these since they can
really slow down your CSS. Don't overdo it.
*********************/

/* @include css-gradient(#dfdfdf,#f8f8f8); */
@mixin css-gradient($from: #dfdfdf, $to: #f8f8f8) {
    background-color: $to;
    background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
    background-image: -webkit-linear-gradient(top, $from, $to);
    background-image: -moz-linear-gradient(top, $from, $to);
    background-image: -o-linear-gradient(top, $from, $to);
    background-image: linear-gradient(to bottom, $from, $to);
}

/*********************
BOX SIZING
*********************/

/* @include box-sizing(border-box); */
/* NOTE: value of "padding-box" is only supported in Gecko. So
probably best not to use it. I mean, were you going to anyway? */
@mixin box-sizing($type: border-box) {
    -webkit-box-sizing: $type;
    -moz-box-sizing:    $type;
    -ms-box-sizing:     $type;
    box-sizing:         $type;
}

@mixin script($px) {
    font-family: 'Madina';
    color: $foil;
    font-size: $px;
    line-height: $px * 1.6;
    letter-spacing: 0;
    padding: 0 0.2em;
    margin: 0 -0.2em;

    background: linear-gradient(0deg, #C48F8B 50%, #F4D9D4 80%, #F8EAE0 100%);
    background-size: 200% auto;
      
    background-clip: text;
    text-fill-color: transparent;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}

@mixin particles($shadow: inset 0px 0px 60px 30px rgba(255,255,255,1)) {
    position: relative;
    padding: 100px 0;

    canvas {
        position: absolute;
        top: 0;
        bottom: 0;
        right: 0;
        left: 0;
        z-index: 0;
    }

    .content,
    .dbo__container {
        position: relative;
        z-index: 3;
    }

    &::after {
        content: '';
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        z-index: 2;
        -webkit-box-shadow: $shadow;
        -moz-box-shadow: $shadow;
        box-shadow: $shadow;
    }
}

